# -*- coding: utf-8 -*-
"""ProjectDataSci.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mieIxXPS4-j8-CkkssZelzBL8VS729Th

#Project Datasci 1/2563

สมาชิก
*   61102010139  นางสาวเจษฎาภรณ์  พุทธโกศัย
*   61102010142  นางสาวณริสสา   ดาราวรรณกุล
*   61102010151  นายปวริศ  ศรีพิบูลย์
*   61102010153  นางสาวปิยธิดา ไทยง้วน
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings("ignore")
from sklearn.model_selection import train_test_split
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import StratifiedKFold, cross_val_score,GridSearchCV
from sklearn.metrics import accuracy_score
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier, BaggingClassifier, AdaBoostClassifier, GradientBoostingClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.neural_network import MLPClassifier
from sklearn.model_selection import StratifiedKFold
from sklearn.model_selection import cross_val_score
from xgboost import XGBClassifier
from sklearn.model_selection import KFold

from google.colab import drive
drive.mount('/content/drive')

"""# การ Exploratory Data Analysis (EDA)

**ข้อมูลสำหรับ Train**
"""

#ทำการอ่านข้อมูลจากไฟล์ Train
data_train = pd.read_csv("/content/drive/MyDrive/DataSci/ProjectDataSci/ย๊ากกกกกก/train_ctrUa4K.csv")
data_train.head(10)

#แปลงค่า Loan_StatusจากString เป็น Integer
data_train = data_train.drop(['Loan_ID'], axis=1)

data_train['Loan_Status'].replace('N', 0, inplace=True)
data_train['Loan_Status'].replace('Y', 1, inplace=True)

#ตรวจสอบคอลัมน์ที่มีค่าว่าง
for features in data_train:
  if data_train[features].isnull().values.any():
    print(features)

#แปลงค่าในคอลัมน์ Dependents ค่า3+ เป็น 3 แบบnumeric
data_train['Dependents'] = data_train['Dependents'].replace('3+',3)

#คอลัมน์ที่มีค่าว่างแทนค่าด้วย Median แทนเป็น Numeric
for feature in ['Dependents','LoanAmount','Loan_Amount_Term']:
  data_train[feature].fillna(data_train[feature].dropna().median(),inplace = True)
  
#คอลัมน์ที่มีค่าว่างแทนค่าด้วย Mode แทนเป็น Category
for feature in ['Gender','Married','Self_Employed','Credit_History']:
  data_train[feature].fillna(data_train[feature].dropna().mode().values[0],inplace = True)

#ทำ Feature Engineering ของไฟล์ Train
#นำข้อมูลในคอลัมน์Self_Employ_Area มาบวกกับProperty_Area
#จะทำให้ทำนายได้ดีขึ้น
data_train['Self_Employ_Area'] = data_train['Self_Employed']+data_train['Property_Area']

#แปลงString เป็น Integer
from sklearn import preprocessing
num = preprocessing.LabelEncoder()

num.fit(['Male','Female'])
data_train['Gender']=num.transform(data_train['Gender']).astype('int')

num.fit(['Yes','No'])
data_train['Married']=num.transform(data_train['Married']).astype('int')

num.fit(['No','Yes'])
data_train['Self_Employed']=num.transform(data_train['Self_Employed']).astype('int')

num.fit(['Urban','Rural','Semiurban'])
data_train['Property_Area']=num.transform(data_train['Property_Area']).astype('int')

num.fit(['NoUrban','YesUrban','NoSemiurban','YesSemiurban','NoRural','YesRural'])
data_train['Self_Employ_Area']=num.transform(data_train['Self_Employ_Area']).astype('int')


data_train['Education'] = data_train['Education'].replace('Graduate',1)
data_train['Education'] = data_train['Education'].replace('Not Graduate',0)
data_train['Dependents'] = data_train['Dependents'].replace('1',1)
data_train['Dependents'] = data_train['Dependents'].replace('0',0)
data_train['Dependents'] = data_train['Dependents'].replace('2',2)

#ตรวจสอบค่าของ applicantIncome ตรวจสอบ outlier
#พบว่ามีค่าที่ต่างกันมาก
print(data_train.shape)
print('data_train applicantIncome has value between {} and {}'.format(data_train['ApplicantIncome'].max(),data_train['ApplicantIncome'].min()))

#นำค่า applicantIncome มาทำ Z score เพื่อลดค่าไม่ให้ต่างกันมาก

from scipy import stats

z_scores = stats.zscore(data_train['ApplicantIncome'])

filtered_entries = np.abs(z_scores) < 3
data_train = data_train[filtered_entries]

print(data_train.shape)
print('data_train applicantIncome has value between {} and {}'.format(data_train['ApplicantIncome'].max(),data_train['ApplicantIncome'].min()))

"""# Visualize"""

data_train["Loan_Status"].value_counts(normalize=True).plot.bar(title = 'Loan_Status')

data_train["Loan_Status"].value_counts(normalize=True)*100

"""จากคอลัมน์ Loan_Status 1 คือ Y ,  0 คือ N
ตอบ Y  ประมาณ 68 %  และ N ประมาณ 31%

**ใช้ pairplot ดูความสัมพันธ์**
"""

columns = ['Gender','Married','Dependents','Self_Employed','Loan_Status']
sns.pairplot(data = data_train[columns] ,  kind = 'reg')

columns1 =['Education','LoanAmount','Loan_Amount_Term','Credit_History','Loan_Status']
sns.pairplot(data = data_train[columns1] ,  kind = 'reg')

#ดูความสัมพันธ์ว่ามีผลเชิงบวกต่อกันหรือไม่ โดยสีเข้ม=ค่ามาก สีจาง=ค่าน้อย
corr_data = data_train.corr()
f, ax = plt.subplots(figsize=(10, 12))
sns.heatmap(corr_data, vmax=1, square=True,annot=True);

"""จากตารางพบว่า ถ้าเทียบค่า Credit_History กับ Loan_Status = 0.54 มีความสัมพันธ์เชิงบวก

**ข้อมูลสำหรับ Test**
"""

#ทำการอ่านข้อมูลจากไฟล์ Test
data_test = pd.read_csv("/content/drive/MyDrive/DataSci/ProjectDataSci/ย๊ากกกกกก/test_lAUu6dG.csv")
data_test.head(10)

#แปลงค่าในคอลัมน์ Dependents ค่า3+ เป็น 3 แบบnumeric
data_test['Dependents'].replace('3+', 3, inplace=True)

#คอลัมน์ที่มีค่าว่างแทนค่าด้วย Median แทนเป็น Numeric
for feature in ['Dependents','LoanAmount','Loan_Amount_Term']:
  data_test[feature].fillna(data_test[feature].dropna().median(),inplace = True)

#คอลัมน์ที่มีค่าว่างแทนค่าด้วย Mode แทนเป็น Category
for feature in ['Gender','Married','Self_Employed','Credit_History']:
  data_test[feature].fillna(data_test[feature].dropna().mode().values[0],inplace = True)

#ทำ Feature Engineering ของไฟล์ Test
#นำข้อมูลในคอลัมน์Self_Employ_Area มาบวกกับProperty_Area
#จะทำให้ทำนายได้ดีขึ้น
data_test['Self_Employ_Area'] = data_test['Self_Employed']+data_test['Property_Area']

#แปลงString เป็น Integer
from sklearn import preprocessing
num = preprocessing.LabelEncoder()

num.fit(['Male','Female'])
data_test['Gender']=num.transform(data_test['Gender']).astype('int')

num.fit(['Yes','No'])
data_test['Married']=num.transform(data_test['Married']).astype('int')

num.fit(['No','Yes'])
data_test['Self_Employed']=num.transform(data_test['Self_Employed']).astype('int')

num.fit(['Urban','Rural','Semiurban'])
data_test['Property_Area']=num.transform(data_test['Property_Area']).astype('int')

num.fit(['NoUrban','YesUrban','NoSemiurban','YesSemiurban','NoRural','YesRural'])
data_test['Self_Employ_Area']=num.transform(data_test['Self_Employ_Area']).astype('int')


data_test = data_test.drop(['Loan_ID'], axis=1)
data_test['Education'] = data_test['Education'].replace('Graduate',1)
data_test['Education'] = data_test['Education'].replace('Not Graduate',0)
data_test['Dependents'] = data_test['Dependents'].replace('1',1)
data_test['Dependents'] = data_test['Dependents'].replace('0',0)
data_test['Dependents'] = data_test['Dependents'].replace('2',2)

"""# กำหนด feature สำหรับทำการ Train  และ feature predict"""

y = data_train.Loan_Status
X = data_train.drop(['Loan_Status','Self_Employed','Property_Area'],axis=1)

"""#สร้าง Model  โดยเลือกใช้ Xgboost"""

#แบ่ง Train และ Test  โดย test size = 20%
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=0)

xgboosts = XGBClassifier(colsample_bytree = 1.0, learning_rate = 0.5,
             max_depth = 5, alpha = 1300, n_estimators = 10,gamma=0.5)
xgboosts.fit(X_train,y_train)

"""#Cross Validation"""

from sklearn.model_selection import cross_validate
from sklearn.model_selection import KFold
kfold=KFold(n_splits=5)
res = cross_validate(XGBClassifier(colsample_bytree = 1.0, learning_rate = 0.5,
               max_depth = 5, alpha = 1300, n_estimators = 10,gamma=0.5),X,y,cv=kfold)
print(res)

"""#Predict Test"""

#นำข้อมูลในไฟล์ Test เก็บใน X_test
X_test = data_test.drop(['Self_Employed','Property_Area'],axis=1)

#นำข้อมูลไฟล์ Test มาทำนายผล
y_predict_test = xgboosts.predict(X_test)
y_predict_test

#นำผลที่ได้จากการทำนายเพิ่มลงในคอลัมน์ชื่อ Loan_Status
data_test.insert(12, "Loan_Status",y_predict_test )

#แปลงค่าในคอลัมน์ Loan_Status จาก 1 = Y และ 0 = N
data_test['Loan_Status'] = data_test['Loan_Status'].replace(1,'Y')
data_test['Loan_Status'] = data_test['Loan_Status'].replace(0,'N')
data_test

#save file
data_test.to_csv('/content/drive/MyDrive/DataSciProject/Project.csv')